// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	repository "github.com/cobu/backend/e2e-test-api/api/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCustomerRepository is a mock of CustomerRepository interface
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// DeleteByPrefix mocks base method
func (m *MockCustomerRepository) DeleteByPrefix(prefix []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByPrefix", prefix)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByPrefix indicates an expected call of DeleteByPrefix
func (mr *MockCustomerRepositoryMockRecorder) DeleteByPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByPrefix", reflect.TypeOf((*MockCustomerRepository)(nil).DeleteByPrefix), prefix)
}

// GetByPrefix mocks base method
func (m *MockCustomerRepository) GetByPrefix(prefix []string) ([]*repository.CustomerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPrefix", prefix)
	ret0, _ := ret[0].([]*repository.CustomerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPrefix indicates an expected call of GetByPrefix
func (mr *MockCustomerRepositoryMockRecorder) GetByPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPrefix", reflect.TypeOf((*MockCustomerRepository)(nil).GetByPrefix), prefix)
}
